# What is Database Management system (DBMS)? 
  ‚Ä¢ DBMS is a software. We use it manage and organize data in a structured manner. 
  ‚Ä¢ We can create, update, delete and query from the database. 
  ‚Ä¢ We store data in form of tables inside database. There are different types of software available as DBMS, i.e., MySQL, PostgreSQL, SQL server, etc. 

  ‚≠ê Note:
      ‚Ä¢ DBMS acts as a bridge between a central database and multiple clients-including apps and users. 
      ‚Ä¢ It uses APIs to handle data requests, enabling apps and users to interact with the database securely and efficiently without directly accessing the data.

# Features of DBMS 
  üåü These are importance features as given below -
      ‚Ä¢ RDBMS: We organize data in form of tables. Tables consist rows and columns. We use primary key and foreign key to connect data each other and for other properties.
      ‚Ä¢ Concurrency control: We can control the data using concurrency mechanisms, so multiple user can communicate with the data at the same time. 
      ‚Ä¢ Data integrity: We can enforce data integrity and security constraints, so we can restrict the data who can access it. 
      ‚Ä¢ Backup: We can recover data because we can have backup of the data in case of event failure occures. 
      ‚Ä¢ Data modeling: We use data modeling to define the structure and relationships of the data in a database.

# Problems with Traditional File-Based Systems
  üîÆ Before the introduction of modern DBMS, data was managed using basic file systems on hard drives. While this approach allowed users to store, retrieve and update files as needed, it came with numerous challenges:
      ‚Ä¢ Data Redundancy: Duplicate entries across files
      ‚Ä¢ Inconsistency: Conflicting or outdated information
      ‚Ä¢ Difficult Access: Manual file search required
      ‚Ä¢ Poor Security: No control over data access
      ‚Ä¢ Single-User Access: No support for collaboration
      ‚Ä¢ No Backup/Recovery: Data loss was often permanent
    - A university file-based system storing data in separate files (e.g., Academics, Results, Hostels) often faced these problems.

# Components of DBMS Applications
  - Any DBMS based applications is made up of six key components that work together to handle data effectively.

  1. Hardware:
      ‚Ä¢ Physical devices like servers, disks, input-output devices (keyboard, monitor, printer).
      ‚Ä¢ Stores and processes data; interfaces between real-world inputs and digital systems.
      ‚Ä¢ Examples: Personal computer hard disk, RAM, network devices used for DBMS operations.

  2. Software:
      ‚Ä¢ Actual DBMS software like MySQL, Oracle, PostgreSQL.
      ‚Ä¢ Includes the database engine, OS, network software, and application tools.
      ‚Ä¢ Translates database access languages into operations.

  3. Data:
      ‚Ä¢ Raw facts stored in structured or unstructured formats.
      ‚Ä¢ Operational Data: Actual user data (e.g., name, age).
      ‚Ä¢ Metadata: Data about data (e.g., storage time, size, data type).
      ‚Ä¢ Core reason DBMS exists‚Äîto manage and store data efficiently.

  4. Procedures:
      ‚Ä¢ Instructions and rules for using DBMS effectively.
      ‚Ä¢ Covers setup, login/logout, data validation, backup, access control, and report generation.
      ‚Ä¢ Helps ensure consistent and secure use of the system.

  5. Database Access Language:
      ‚Ä¢ Used to interact with the database (create, read, update, delete data).
      ‚Ä¢ Examples: SQL, MyAccess, Oracle PL/SQL.
      ‚Ä¢ DDL (Data Definition Language) ‚Äì CREATE, ALTER, DROP
      ‚Ä¢ DML (Data Manipulation Language) ‚Äì INSERT, UPDATE, DELETE

  6. People:
      ‚Ä¢ Users interacting with DBMS at different levels:
      ‚Ä¢ Database Administrators (DBA) ‚Äì Manage security, performance, user access.
      ‚Ä¢ Developers ‚Äì Build applications using the database.
      ‚Ä¢ End Users ‚Äì Use applications to access the database (e.g., students, employees).


# Types of DBMS:
  - There are several types of Database Management Systems (DBMS), each tailored to different data structures, scalability requirements and application needs. 
  - The most common types are as follows:

  1. Relational Database Management System (RDBMS):
     ‚Ä¢ It organizes data into tables (relations) composed of rows and columns.
     ‚Ä¢ Uses primary keys to uniquely identify rows and foreign keys to establish relationships between tables.
     ‚Ä¢ Queries are written in SQL (Structured Query Language), which allows for efficient data manipulation and retrieval.

     üåü Examples: MySQL oracle, Microsoft SQL Server and Postgre SQL.

  2. NoSQL DBMS:
     ‚Ä¢ They are designed to handle large-scale data and provide high performance for scenarios where relational models might be restrictive.
     ‚Ä¢ They store data in various non-relational formats, such as key-value pairs, documents, graphs or columns.
     ‚Ä¢ These flexible data models enable rapid scaling and are well-suited for unstructured or semi-structured data.

     üåü Examples: MongoDB, Cassandra, DynamoDB and Redis.
  
  3. Object-Oriented DBMS (OODBMS):
     ‚Ä¢ It integrates object-oriented programming concepts into the database environment, allowing data to be stored as objects.
     ‚Ä¢ Supports complex data types and relationships, making it ideal for applications requiring advanced data modeling and real-world simulations.
    
    üåü Examples: ObjectDB, db4o.
  
  4. Hierarchical Database:
     ‚Ä¢ Organizes data in a tree-like structure, where each record (node) has a single parent and have multiple children.
     ‚Ä¢ This model is similar to a file system with folders and subfolders.
     ‚Ä¢ It is efficient for storing data with a clear hierarchy, such as organizational charts or file directories.
     ‚Ä¢ Navigation is fast and predictable due to the fixed structure.
     ‚Ä¢ It lacks flexibility and difficult to restructure or handle complex many-to-many relationships.
    
    üåü Example: IBM Information Management System (IMS).

  5. Network Database:
     ‚Ä¢ It uses a graph-like model to allow more complex relationships between entities.
     ‚Ä¢ Unlike the hierarchical model, it permits each child to have multiple parents, enabling many-to-many relationships.
     ‚Ä¢ Data is represented using records and sets, where sets define the relationships.
     ‚Ä¢ It is more flexible than the hierarchical model and better suited for applications with complex data linkages.

    üåü Example: Integrated Data Store (IDS), TurboIMAGE.

  6. Cloud-Based Database:
     ‚Ä¢ They are hosted on cloud computing platforms like AWS, Azure or Google Cloud.
     ‚Ä¢ They offer on-demand scalability, high availability, automatic backups and remote accessibility.
     ‚Ä¢ These databases can be relational (SQL) or non-relational (NoSQL) and are maintained by cloud service providers, reducing administrative overhead.
     ‚Ä¢ They support modern application requirements, including distributed access and real-time analytics.
  
    üåü Example: Amazon RDS (for SQL), MongoDB Atlas (for NoSQL), Google BigQuery.

  7. Centralized Database: A single database located at a single location. 

  8. Distributed Database: A database where storage devices are not all attached to a common CPU, spreading data across multiple physical locations. 
    

