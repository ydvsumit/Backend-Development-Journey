/**
 * Semantic Versioning (semver) in Node.js â€” this is what you see in package.json dependencies like ^4.17.21 or ~1.2.3
 *
 * ðŸ”¹ What is Semantic Versioning (SemVer)?
 *    - Semantic Versioning means every package version follows a MAJOR.MINOR.PATCH format: MAJOR.MINOR.PATCH
 *        â€¢ MAJOR â†’ Breaking changes
 *        â€¢ MINOR â†’ New features (backward-compatible)
 *        â€¢ PATCH â†’ Bug fixes (backward-compatible)
 *
 * Example:
 *          â€¢ 1.0.0 â†’ First stable release
 *          â€¢ 1.1.0 â†’ Added a feature (no breaking changes)
 *          â€¢ 1.1.1 â†’ Bug fix
 *
 * ðŸ”¹ Symbols in SemVer (^, ~, etc.)
 *    - In package.json, you usually see:
 *                                        "dependencies": {
 *                                            "express": "^4.17.21",
 *                                            "lodash": "~4.17.15"
 *                                          }
 *
 * 1. Caret ( ^ ):
 *                â€¢ ^4.17.21 â†’ Install the latest minor/patch updates, but lock MAJOR.
 *                â€¢ Allowed: 4.x.x (â‰¥4.17.21 and <5.0.0).
 *                â€¢ Example: If a new version 4.20.0 comes, itâ€™s allowed.
 *                â€¢ If 5.0.0 comes, NOT allowed (because major changes may break code).
 *                ðŸ‘‰ Caret is the most common â€” keeps your project up-to-date without breaking.
 *
 * 2. Tilde ( ~ ):
 *                â€¢ ~4.17.15 â†’ Install the latest patch updates, but lock MINOR.
 *                â€¢ Allowed: 4.17.x (â‰¥4.17.15 and <4.18.0).
 *                â€¢ Example: If 4.17.20 comes, itâ€™s allowed.
 *                â€¢ If 4.18.0 comes, NOT allowed.
 *                ðŸ‘‰ Tilde is safer â€” only allows bug fixes, not new features.
 *
 * 3. Exact Version:
 *                  â€¢ "express": "4.17.21"
 *                  â€¢ Installs only that version, no updates.
 *                  â€¢ Very strict, rarely used in real projects.
 *
 * 4. Other Symbols:
 *                  â€¢ >1.2.3 â†’ Greater than 1.2.3
 *                  â€¢ >=1.2.3 â†’ Greater than or equal to 1.2.3
 *                  â€¢ <2.0.0 â†’ Any version less than 2.0.0
 *                  â€¢ * â†’ Any version (not safe, rarely used)
 *                  â€¢ latest â†’ Always fetch latest version from npm
 */

/**
 * Quick Example of package.json:
 *                                "dependencies": {
 *                                    "express": "^4.16.0",
 *                                    "mongoose": "~5.11.0",
 *                                    "cors": "2.8.5"
 *                                 }
 *
 *        â€¢ Express â†’ Can install 4.17.21, 4.19.0 (minor/patch ok), but not 5.x.x.
 *        â€¢ Mongoose â†’ Can install 5.11.15, 5.11.20 (patch ok), but not 5.12.0.
 *        â€¢ Cors â†’ Must install exactly 2.8.5.
 *
 * ðŸ‘‰ In real projects, most use ^ for libraries (keeps you up-to-date but avoids breaking changes).
 * ðŸ‘‰ Use ~ or exact versions if you want stability.
 */

// -----------------------------------------How npm decides which version to install when multiple ranges are defined in Node.js------------------------------------------------
/**
 * ðŸ”¹ Case: Multiple Version Ranges
 *    - Sometimes in package.json, or inside dependencies of dependencies, youâ€™ll see multiple version ranges like:
 *           "dependencies": {
 *               "express": "^4.17.0 || ~4.16.0"
 *           }
 *
 *
 * This means:
 *              â€¢ ^4.17.0 â†’ Allows 4.17.0 up to <5.0.0
 *              â€¢ ~4.16.0 â†’ Allows 4.16.0 up to <4.17.0
 * So, npm checks:
 * ðŸ‘‰ Is there a version that satisfies both?
 *        â€¢ If yes â†’ Installs the highest version that matches.
 *        â€¢ If no â†’ Installs based on the "OR" condition.
 *
 *
 * ðŸ”¹ Example 1: ^4.17.0 || ~4.16.0
 *      â€¢ Latest available = 4.19.2
 *      â€¢ Both ranges allow versions < 5.0.0 â†’ âœ… 4.19.2 is chosen.
 *
 *
 * ðŸ”¹ Example 2: ~4.16.0 || ^5.0.0
 *      â€¢ ~4.16.0 â†’ Accepts 4.16.x only
 *      â€¢ ^5.0.0 â†’ Accepts 5.x.x
 *      â€¢ If latest = 5.2.1 â†’ npm installs 5.2.1 (because it's higher, and satisfies one range).
 *
 *
 * ðŸ”¹ Example 3: >=2.0.0 <3.0.0 || ^4.0.0
 *      â€¢ First range: 2.x.x only
 *      â€¢ Second range: 4.x.x only
 *      â€¢ If latest = 4.5.0 â†’ npm installs 4.5.0
 *      â€¢ If only 2.9.0 available â†’ npm installs 2.9.0
 *
 *
 * ðŸ”¹ npmâ€™s Decision Rules (Simplified)
 *      â€¢ Find the versions that satisfy the range(s).
 *      â€¢ Pick the highest version available that satisfies.
 *      â€¢ If multiple ranges are separated with ||, npm tries them from left to right, but always prefers the highest version overall.
 *
 *
 * ðŸ”¹ Why this matters
 *      â€¢ Youâ€™ll often see complex ranges in big projects (react, express, etc.)
 *      â€¢ This ensures compatibility across dependencies, while still allowing updates.
 */
